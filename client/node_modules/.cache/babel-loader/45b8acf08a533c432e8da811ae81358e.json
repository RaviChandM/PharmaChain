{"ast":null,"code":"var _jsxFileName = \"/home/mohamedkaram/Documents/Demo-sandbox/client/src/App.js\";\nimport React, { Component } from \"react\"; // import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      accounts: null,\n      balance: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        const balance = await web3.eth.getBalance(accounts[0]);\n        const balanceEth = web3.utils.fromWei(balance, 'ether');\n        console.log(balanceEth); // Get the contract instance.\n        // const networkId = await web3.eth.net.getId();\n        // const deployedNetwork = SimpleStorageContract.networks[networkId];\n        // const instance = new web3.eth.Contract(\n        //   SimpleStorageContract.abi,\n        //   deployedNetwork && deployedNetwork.address,\n        // );\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        // this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          web3,\n          accounts,\n          balance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n  //   // Stores a given value, 5 by default.\n  //   await contract.methods.set(5).send({ from: accounts[0] });\n  //   // Get the value from the contract to prove it worked.\n  //   const response = await contract.methods.get().call();\n  //   // Update state with the result.\n  //   this.setState({ storageValue: response });\n  // };\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" Account: \", this.state.accounts, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" Balance: \", this.balanceEth, \" \"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mohamedkaram/Documents/Demo-sandbox/client/src/App.js"],"names":["React","Component","getWeb3","App","state","web3","accounts","balance","componentDidMount","eth","getAccounts","getBalance","balanceEth","utils","fromWei","console","log","setState","error","alert","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAG1BG,KAH0B,GAGlB;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAeC,MAAAA,QAAQ,EAAE,IAAzB;AAAgCC,MAAAA,OAAO,EAAE;AAAzC,KAHkB;;AAAA,SAK1BC,iBAL0B,GAKN,YAAY;AAC9B,UAAI;AACF;AACA,cAAMH,IAAI,GAAG,MAAMH,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMI,QAAQ,GAAG,MAAMD,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMH,OAAO,GAAG,MAAMF,IAAI,CAACI,GAAL,CAASE,UAAT,CAAoBL,QAAQ,CAAC,CAAD,CAA5B,CAAtB;AACA,cAAMM,UAAU,GAAGP,IAAI,CAACQ,KAAL,CAAWC,OAAX,CAAmBP,OAAnB,EAA4B,OAA5B,CAAnB;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EARE,CASF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,aAAKK,QAAL,CAAc;AAACZ,UAAAA,IAAD;AAAOC,UAAAA,QAAP;AAAiBC,UAAAA;AAAjB,SAAd;AACD,OArBD,CAqBE,OAAOW,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAJ,QAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACD;AACF,KAlCyB;AAAA;;AAoC1B;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEAE,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACC,WACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe,KAAKhB,KAAL,CAAWE,QAA1B,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe,KAAKM,UAApB,MAFF,CADD;AAiBF;;AAtEyB;;AAyE5B,eAAeT,GAAf","sourcesContent":["import React, { Component } from \"react\";\n// import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  state = { web3: null , accounts: null , balance: null}\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const balance = await web3.eth.getBalance(accounts[0]);\n      const balanceEth = web3.utils.fromWei(balance, 'ether');\n      console.log(balanceEth);\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.setState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({web3, accounts, balance});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n\n  //   // Stores a given value, 5 by default.\n  //   await contract.methods.set(5).send({ from: accounts[0] });\n\n  //   // Get the value from the contract to prove it worked.\n  //   const response = await contract.methods.get().call();\n\n  //   // Update state with the result.\n  //   this.setState({ storageValue: response });\n  // };\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n     return (\n      <div className=\"App\">\n        <h1> Account: {this.state.accounts} </h1>\n        <h1> Balance: {this.balanceEth} </h1>\n        {/* <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}