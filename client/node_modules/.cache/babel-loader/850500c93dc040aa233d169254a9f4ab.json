{"ast":null,"code":"var _jsxFileName = \"/home/mohamedkaram/Documents/Demo-sandbox/client/src/App.js\";\nimport React, { Component } from \"react\"; // import getWeb3 from \"./getWeb3\";\n\nimport Header from \"./components/Header\";\nimport ProductForm from \"./components/ProductForm\";\nimport Navbar from \"./components/Navbar\"; // import MaterialsList from \"./components/MaterialsList\";\n\nimport Inventory from \"./components/Inventory\"; // import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n// import SandboxContract from './contracts/Sandbox.json';\n\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {// Get network provider and web3 instance.\n        //  const web3 = await getWeb3();\n        // // // Use web3 to get the user's accounts.\n        //  const accounts = await web3.eth.getAccounts();\n        //  const balance = web3.utils.fromWei(await web3.eth.getBalance(accounts[0]), 'ether');\n        // // Get the contract instance.\n        //   const networkId = await web3.eth.net.getId();\n        //   const deployedNetwork = SimpleStorageContract.networks[networkId];\n        //   const instance = new web3.eth.Contract(\n        //     SimpleStorageContract.abi,\n        //     deployedNetwork && deployedNetwork.address,\n        //   );\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        //  this.setState({ web3, accounts, contract: instance }, this.runExample);\n        //  this.setState({web3, accounts, balance});\n      } catch (error) {// Catch any errors for any of the above operations.\n        //  alert(\n        //    `Failed to load web3. Check console for details.`,\n        //  );\n        //  console.error(error);\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault(); // this.props.contract.methods.addProduct('1', this.state.input).send({from: this.props.accounts[0]});\n      // this.logProduct();\n\n      console.log(this.state.input);\n      this.setState({\n        input: ''\n      });\n    };\n\n    this.onChange = e => this.setState({\n      input: e.target.value\n    });\n  }\n\n  // runExample = async () => {\n  //   const {contract } = this.state;\n  //   // Stores a given value, 5 by default.\n  //   // await contract.methods.set(5).send({ from: accounts[0] });\n  //   const supplier =  await contract.methods.getSupplier('0xf333028b8Fc7a030F1186Db50BceF0C0607c2CF2').call();\n  //   // Get the value from the contract to prove it worked.\n  //   // const response = await contract.methods.get().call();\n  //   // Update state with the result.\n  //   this.setState({ supplier });\n  // };\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Header, {\n      accounts: this.state.accounts,\n      balance: this.state.balance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(NavLink, {\n      to: \"/add-product\",\n      style: {\n        padding: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Add Product\"), React.createElement(NavLink, {\n      to: \"/inventory\",\n      style: {\n        padding: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Inventory\"), React.createElement(Route, {\n      path: \"/add-product\",\n      exact: true,\n      component: ProductForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/inventory\",\n      exact: true,\n      component: Inventory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mohamedkaram/Documents/Demo-sandbox/client/src/App.js"],"names":["React","Component","Header","ProductForm","Navbar","Inventory","BrowserRouter","Route","NavLink","App","state","web3","accounts","contract","componentDidMount","error","onSubmit","e","preventDefault","console","log","input","setState","onChange","target","value","render","balance","padding"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;AACA;;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,OAA/B,QAA8C,kBAA9C;AACA,OAAO,WAAP;;AAIA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAG1BS,KAH0B,GAGlB;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAeC,MAAAA,QAAQ,EAAE,IAAzB;AAA+BC,MAAAA,QAAQ,EAAE;AAAzC,KAHkB;;AAAA,SAK1BC,iBAL0B,GAKN,YAAY;AAE9B,UAAI,CACF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,OAnBD,CAmBE,OAAOC,KAAP,EAAc,CACd;AACA;AACA;AACA;AACA;AACD;AAEF,KAlCyB;;AAAA,SAqC1BC,QArC0B,GAqCdC,CAAD,IAAO;AAChBA,MAAAA,CAAC,CAACC,cAAF,GADgB,CAEhB;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWW,KAAvB;AACA,WAAKC,QAAL,CAAc;AAAED,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KA3CyB;;AAAA,SA6C5BE,QA7C4B,GA6ChBN,CAAD,IAAO,KAAKK,QAAL,CAAc;AAAED,MAAAA,KAAK,EAAGJ,CAAC,CAACO,MAAF,CAASC;AAAnB,KAAd,CA7CU;AAAA;;AAgD1B;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACC,WACC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAG,KAAKhB,KAAL,CAAWE,QAA9B;AAAyC,MAAA,OAAO,EAAI,KAAKF,KAAL,CAAWiB,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAC,cAAZ;AAA2B,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAKE,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAC,YAAZ;AAAyB,MAAA,KAAK,EAAE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,EAQE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,cAAZ;AAA2B,MAAA,KAAK,MAAhC;AAAiC,MAAA,SAAS,EAAEzB,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,YAAZ;AAAyB,MAAA,KAAK,MAA9B;AAA+B,MAAA,SAAS,EAAEE,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADA,CADD;AA8BF;;AAhGyB;;AAmG5B,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\n// import getWeb3 from \"./getWeb3\";\nimport Header from \"./components/Header\"\nimport ProductForm from \"./components/ProductForm\"\nimport Navbar from \"./components/Navbar\"\n// import MaterialsList from \"./components/MaterialsList\";\nimport Inventory from \"./components/Inventory\"\n// import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n// import SandboxContract from './contracts/Sandbox.json';\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  state = { web3: null , accounts: null, contract: null}\n\n  componentDidMount = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      //  const web3 = await getWeb3();\n\n      // // // Use web3 to get the user's accounts.\n      //  const accounts = await web3.eth.getAccounts();\n      //  const balance = web3.utils.fromWei(await web3.eth.getBalance(accounts[0]), 'ether');\n      // // Get the contract instance.\n      //   const networkId = await web3.eth.net.getId();\n      //   const deployedNetwork = SimpleStorageContract.networks[networkId];\n      //   const instance = new web3.eth.Contract(\n      //     SimpleStorageContract.abi,\n      //     deployedNetwork && deployedNetwork.address,\n      //   );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //  this.setState({ web3, accounts, contract: instance }, this.runExample);\n      //  this.setState({web3, accounts, balance});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      //  alert(\n      //    `Failed to load web3. Check console for details.`,\n      //  );\n      //  console.error(error);\n    }\n\n  };\n\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    // this.props.contract.methods.addProduct('1', this.state.input).send({from: this.props.accounts[0]});\n    // this.logProduct();\n    console.log(this.state.input)\n    this.setState({ input: '' });\n  }\n\nonChange = (e) => this.setState({ input : e.target.value });\n\n\n  // runExample = async () => {\n  //   const {contract } = this.state;\n\n  //   // Stores a given value, 5 by default.\n  //   // await contract.methods.set(5).send({ from: accounts[0] });\n  //   const supplier =  await contract.methods.getSupplier('0xf333028b8Fc7a030F1186Db50BceF0C0607c2CF2').call();\n\n  //   // Get the value from the contract to prove it worked.\n  //   // const response = await contract.methods.get().call();\n\n  //   // Update state with the result.\n  //   this.setState({ supplier });\n  // };\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n     return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Header accounts= {this.state.accounts}  balance = {this.state.balance} />\n        <NavLink to=\"/add-product\" style={{ padding: 10 }}>\n        Add Product\n        </NavLink>\n        <NavLink to=\"/inventory\" style={{ padding: 10 }}>\n        Inventory\n        </NavLink>\n        <Route path=\"/add-product\" exact component={ProductForm} />\n        <Route path=\"/inventory\" exact component={Inventory} />\n        <Navbar />\n        {/* <ProductForm contract = {this.state.contract} accounts = {this.state.accounts} /> */}\n        {/* <Inventory /> */}\n        {/* <MaterialsList/> */}\n        {/* <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div> */}\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}