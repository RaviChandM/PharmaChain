{"ast":null,"code":"var _jsxFileName = \"/home/mohamedkaram/Documents/Demo-sandbox/client/src/components/TrackForm.js\";\nimport React, { Component } from \"react\";\n\nfunction TrackImg(props) {\n  if (props.status) {\n    return React.createElement(\"img\", {\n      src: require(\"../valid.svg\"),\n      width: \"100px\",\n      alt: \"invalid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(\"img\", {\n      src: require(\"../invalid.svg\"),\n      width: \"100px\",\n      alt: \"valid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    });\n  }\n}\n\nclass TrackRecord extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      matStatus: true\n    };\n  }\n\n  // constructor(props) {\n  //   super(props);\n  // }\n  render() {\n    let status = this.props.material;\n\n    if (status == 'abnormal') {\n      this.setState({\n        matStatus: false\n      });\n    } else {}\n\n    const dateStr = new Date(this.props.time * 1000).toString();\n    const dateArr = dateStr.split(\" \", 5);\n    const timestamp = dateArr.join(\" \");\n    return React.createElement(\"div\", {\n      className: \"track-record-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(TrackImg, {\n      status: this.state.matStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      className: \"record-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"timestamp log-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \" \", timestamp), React.createElement(\"li\", {\n      className: \"head log-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" \", this.props.ship), React.createElement(\"hr\", {\n      className: \"custom-hr-full\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      className: \"log-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"TEMP:\"), \" \", this.props.temp), React.createElement(\"li\", {\n      className: \"log-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \" \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"HUMIDITY:\"), \"  \", this.props.humid), React.createElement(\"li\", {\n      className: \"log-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"STATUS:\"), React.createElement(\"span\", {\n      style: {\n        color: 'green'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.props.material))));\n  }\n\n}\n\nclass Track extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logs: []\n    };\n\n    this.componentDidMount = async () => {};\n\n    this.state = {\n      requestID: \"\"\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      let id = parseInt(this.state.requestID, 10); // await this.props.contract.methods.createLog(1, 'SHIPPED' ,'20C', '25%', 'NORMAL').send({from: this.props.account})\n\n      let response = await this.props.contract.methods.getTrackLogs(id).call();\n\n      if (response.length === 0) {\n        this.setState({\n          msg: 'No tracking logs are available for this request, please try again later!'.toUpperCase()\n        });\n      }\n\n      setTimeout(() => {\n        this.setState({\n          msg: ''\n        });\n      }, 3000);\n      let log = response.map((item, index) => {\n        const shipStatus = item.shipStatus;\n        const matStatus = item.materialStatus;\n        const temp = item.currentTemp;\n        const humid = item.currentHumidity;\n        const time = item.logTime;\n        this.setState({\n          shipStatus,\n          matStatus,\n          temp,\n          humid,\n          time\n        });\n        return React.createElement(TrackRecord, {\n          key: index,\n          status: item,\n          time: this.state.time,\n          ship: this.state.shipStatus,\n          material: this.state.matStatus,\n          temp: this.state.temp,\n          humid: this.state.humid,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      });\n      this.setState({\n        response,\n        log\n      });\n      this.setState({\n        requestID: \" \"\n      });\n    };\n\n    this.handleChange = async e => {\n      this.setState({\n        requestID: this.requestIdRef.current.value\n      });\n    };\n\n    this.requestIdRef = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    let acc = this.props.account;\n    let cont = this.props.contract;\n\n    if (!acc || !cont) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \" Loading..... \");\n    }\n\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Track Requested Shipments \"), React.createElement(\"label\", {\n      style: {\n        marginRight: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \" Request ID: \"), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"e.g 101\",\n      value: this.state.requestID,\n      ref: this.requestIdRef,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      type: \"submit\",\n      className: \"btn\",\n      value: \"VIEW SHIPMENT STATUS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        margin: '10px 0px'\n      },\n      className: \"query-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.msg), React.createElement(\"div\", {\n      className: \"response-logs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.log, \" \"));\n  }\n\n}\n\nexport default Track;","map":{"version":3,"sources":["/home/mohamedkaram/Documents/Demo-sandbox/client/src/components/TrackForm.js"],"names":["React","Component","TrackImg","props","status","require","TrackRecord","state","matStatus","render","material","setState","dateStr","Date","time","toString","dateArr","split","timestamp","join","ship","temp","humid","color","Track","constructor","logs","componentDidMount","requestID","handleSubmit","e","preventDefault","id","parseInt","response","contract","methods","getTrackLogs","call","length","msg","toUpperCase","setTimeout","log","map","item","index","shipStatus","materialStatus","currentTemp","currentHumidity","logTime","handleChange","requestIdRef","current","value","createRef","bind","acc","account","cont","marginRight","cursor","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nfunction TrackImg(props) {\n  if(props.status) {\n    return  <img src={require(\"../valid.svg\")} width = '100px' alt= 'invalid'/>\n  } else {\n    return  <img src={require(\"../invalid.svg\")} width = '100px' alt= 'valid'/>\n  }\n}\nclass TrackRecord extends Component {\n  state = {matStatus: true }\n\n  // constructor(props) {\n  //   super(props);\n   \n  // }\n  render() {\n    let status = this.props.material;\n    if (status == 'abnormal') {\n      this.setState({matStatus: false})\n    } else {\n    }\n    const dateStr = new Date(this.props.time*1000).toString();\n    const dateArr = dateStr.split(\" \", 5);\n    const timestamp  = dateArr.join(\" \")\n    return (\n      <div className=\"track-record-container\"> \n      \n      <TrackImg status = {this.state.matStatus} />\n      <ul className='record-list'>\n         <li className=\"timestamp log-item\"> {timestamp}</li>\n         <li className=\"head log-item\"> {this.props.ship}</li>\n         <hr className='custom-hr-full'/>\n         <li className=\"log-item\"><strong>TEMP:</strong> {this.props.temp}</li>\n         <li className=\"log-item\"> <strong>HUMIDITY:</strong>  {this.props.humid}</li>\n         <li className=\"log-item\"> \n              <strong>STATUS:</strong> \n              <span style={{color: 'green'}}>{this.props.material}</span>\n         </li>\n      </ul>\n      \n      </div>\n    );\n  }\n}\n\nclass Track extends Component {\n  state = { logs: [] };\n\n  componentDidMount = async () => {};\n\n  state = { requestID: \"\" };\n\n  constructor(props) {\n    super(props);\n    this.requestIdRef = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    let id = parseInt(this.state.requestID, 10);\n    // await this.props.contract.methods.createLog(1, 'SHIPPED' ,'20C', '25%', 'NORMAL').send({from: this.props.account})\n    let response = await this.props.contract.methods.getTrackLogs(id).call();\n\n    if(response.length === 0) {\n      this.setState({msg: 'No tracking logs are available for this request, please try again later!'.toUpperCase()})\n    }\n    setTimeout(() => {\n      this.setState({ msg: '' })\n    }, 3000);\n    \n    let log = response.map((item,index) => {\n\n      const shipStatus = item.shipStatus;\n      const matStatus = item.materialStatus;\n      const temp = item.currentTemp;\n      const humid = item.currentHumidity;\n      const time  = item.logTime;\n      this.setState({shipStatus,matStatus,temp,humid,time})\n      \n      return <TrackRecord key={index}\n      status = {item}\n      time = {this.state.time}\n      ship = {this.state.shipStatus}\n      material = {this.state.matStatus}\n      temp = {this.state.temp}\n      humid = {this.state.humid}\n       />\n\n    });\n\n    this.setState({ response, log });\n    this.setState({\n      requestID: \" \",\n    });\n  };\n\n  handleChange = async (e) => {\n    this.setState({\n      requestID: this.requestIdRef.current.value,\n    });\n  };\n\n  render() {\n    let acc = this.props.account;\n    let cont = this.props.contract;\n\n    if (!acc || !cont) {\n      return <div> Loading..... </div>;\n    }\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form-container\">\n        <div className=\"form-row\">\n          <h4>Track Requested Shipments </h4>\n          <label style={{marginRight: '5px'}}> Request ID: </label>\n          <input\n            type=\"text\"\n            placeholder=\"e.g 101\"\n            value={this.state.requestID}\n            ref={this.requestIdRef}\n            onChange={this.handleChange}\n          />\n          <input\n            style={{ cursor: \"pointer\" }}\n            type=\"submit\"\n            className=\"btn\"\n            value=\"VIEW SHIPMENT STATUS\"\n          />\n        </div>\n\n        <div style= {{margin: '10px 0px'}} className=\"query-result\">\n            {this.state.msg}\n        </div>\n        <div className=\"response-logs\">{this.state.log} </div>\n      </form>\n    );\n  }\n}\n\nexport default Track;\n"]},"metadata":{},"sourceType":"module"}